{"version":3,"file":"mint.mjs","sources":["../../../../../../../../node_modules/@solana/spl-token/lib/esm/state/mint.js"],"sourcesContent":["import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map"],"names":["MintLayout","struct","u32","publicKey","u64","u8","bool","MINT_SIZE","span","async","getMint","connection","address","commitment","programId","TOKEN_PROGRAM_ID","unpackMint","getAccountInfo","info","TokenAccountNotFoundError","owner","equals","TokenInvalidAccountOwnerError","data","length","TokenInvalidAccountSizeError","rawMint","decode","slice","tlvData","Buffer","alloc","ACCOUNT_SIZE","MULTISIG_SIZE","AccountType","Mint","TokenInvalidMintError","ACCOUNT_TYPE_SIZE","mintAuthority","mintAuthorityOption","supply","decimals","isInitialized","freezeAuthority","freezeAuthorityOption","getAssociatedTokenAddressSync","mint","allowOwnerOffCurve","associatedTokenProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","PublicKey","isOnCurve","toBuffer","TokenOwnerOffCurveError","findProgramAddressSync"],"mappings":"gyBAmDaA,EAAaC,EAAgB,CACtCC,EAAI,uBACJC,EAAU,iBACVC,EAAI,UACJC,EAAG,YACHC,EAAK,iBACLJ,EAAI,yBACJC,EAAU,qBAIDI,EAAYP,EAAWQ,KAY7BC,eAAeC,EAClBC,EACAC,EACAC,EACAC,EAAYC,GAGZ,OAAOC,EAAWJ,QADCD,EAAWM,eAAeL,EAASC,GACrBC,EACrC,CAWM,SAAUE,EAAWJ,EAAoBM,EAAkCJ,EAAYC,GACzF,IAAKG,EAAM,MAAM,IAAIC,EACrB,IAAKD,EAAKE,MAAMC,OAAOP,GAAY,MAAM,IAAIQ,EAC7C,GAAIJ,EAAKK,KAAKC,OAASjB,EAAW,MAAM,IAAIkB,EAE5C,MAAMC,EAAU1B,EAAW2B,OAAOT,EAAKK,KAAKK,MAAM,EAAGrB,IACrD,IAAIsB,EAAUC,OAAOC,MAAM,GAC3B,GAAIb,EAAKK,KAAKC,OAASjB,EAAW,CAC9B,GAAIW,EAAKK,KAAKC,QAAUQ,EAAc,MAAM,IAAIP,EAChD,GAAIP,EAAKK,KAAKC,SAAWS,EAAe,MAAM,IAAIR,EAClD,GAAIP,EAAKK,KAAKS,IAAiBE,EAAYC,KAAM,MAAM,IAAIC,EAC3DP,EAAUX,EAAKK,KAAKK,MAAMI,EAAeK,EAC7C,CAEA,MAAO,CACHzB,UACA0B,cAAeZ,EAAQa,oBAAsBb,EAAQY,cAAgB,KACrEE,OAAQd,EAAQc,OAChBC,SAAUf,EAAQe,SAClBC,cAAehB,EAAQgB,cACvBC,gBAAiBjB,EAAQkB,sBAAwBlB,EAAQiB,gBAAkB,KAC3Ed,UAER,CAyEM,SAAUgB,EACZC,EACA1B,EACA2B,GAAqB,EACrBjC,EAAYC,EACZiC,EAA2BC,GAE3B,IAAKF,IAAuBG,EAAUC,UAAU/B,EAAMgC,YAAa,MAAM,IAAIC,EAE7E,MAAOzC,GAAWsC,EAAUI,uBACxB,CAAClC,EAAMgC,WAAYtC,EAAUsC,WAAYN,EAAKM,YAC9CJ,GAGJ,OAAOpC,CACX","x_google_ignoreList":[0]}