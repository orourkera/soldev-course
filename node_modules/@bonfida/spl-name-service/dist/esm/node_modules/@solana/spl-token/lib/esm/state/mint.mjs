import{struct as t,u32 as i,u8 as o}from"../../../../buffer-layout/lib/Layout.mjs";import{PublicKey as r}from"@solana/web3.js";import{TOKEN_PROGRAM_ID as e,ASSOCIATED_TOKEN_PROGRAM_ID as n}from"../constants.mjs";import{TokenAccountNotFoundError as f,TokenInvalidAccountOwnerError as s,TokenInvalidAccountSizeError as u,TokenInvalidMintError as m,TokenOwnerOffCurveError as a}from"../errors.mjs";import{AccountType as l,ACCOUNT_TYPE_SIZE as p}from"../extensions/accountType.mjs";import{ACCOUNT_SIZE as c}from"./account.mjs";import{MULTISIG_SIZE as h}from"./multisig.mjs";import{publicKey as y}from"../../../../buffer-layout-utils/lib/esm/web3.mjs";import{u64 as d}from"../../../../buffer-layout-utils/lib/esm/bigint.mjs";import{bool as w}from"../../../../buffer-layout-utils/lib/esm/native.mjs";const A=t([i("mintAuthorityOption"),y("mintAuthority"),d("supply"),o("decimals"),w("isInitialized"),i("freezeAuthorityOption"),y("freezeAuthority")]),b=A.span;async function j(t,i,o,r=e){return g(i,await t.getAccountInfo(i,o),r)}function g(t,i,o=e){if(!i)throw new f;if(!i.owner.equals(o))throw new s;if(i.data.length<b)throw new u;const r=A.decode(i.data.slice(0,b));let n=Buffer.alloc(0);if(i.data.length>b){if(i.data.length<=c)throw new u;if(i.data.length===h)throw new u;if(i.data[c]!=l.Mint)throw new m;n=i.data.slice(c+p)}return{address:t,mintAuthority:r.mintAuthorityOption?r.mintAuthority:null,supply:r.supply,decimals:r.decimals,isInitialized:r.isInitialized,freezeAuthority:r.freezeAuthorityOption?r.freezeAuthority:null,tlvData:n}}function z(t,i,o=!1,f=e,s=n){if(!o&&!r.isOnCurve(i.toBuffer()))throw new a;const[u]=r.findProgramAddressSync([i.toBuffer(),f.toBuffer(),t.toBuffer()],s);return u}export{b as MINT_SIZE,A as MintLayout,z as getAssociatedTokenAddressSync,j as getMint,g as unpackMint};
//# sourceMappingURL=mint.mjs.map
