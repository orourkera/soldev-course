{"version":3,"file":"browser.cjs","sources":["../../../../../node_modules/bigint-buffer/dist/browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n"],"names":["Object","defineProperty","browser","__exports","value","toBigIntLE_1","toBigIntLE","buf","reversed","Buffer","from","reverse","hex","toString","length","BigInt","toBigIntBE","toBufferLE_1","toBufferLE","num","width","buffer","padStart","slice","toBufferBE"],"mappings":"mHAEAA,OAAOC,eAAeC,EAAOC,UAAE,aAAc,CAAEC,OAAO,IAmBtD,IAAkBC,EAAAH,EAAAA,UAAAI,WAZlB,SAAoBC,GAChB,CACI,MAAMC,EAAWC,OAAOC,KAAKH,GAC7BC,EAASG,UACT,MAAMC,EAAMJ,EAASK,SAAS,OAC9B,OAAmB,IAAfD,EAAIE,OACGC,OAAO,GAEXA,OAAQ,KAAIH,IACtB,CAEL,EAiBkBV,EAAAC,UAAAa,WAVlB,SAAoBT,GAChB,CACI,MAAMK,EAAML,EAAIM,SAAS,OACzB,OAAmB,IAAfD,EAAIE,OACGC,OAAO,GAEXA,OAAQ,KAAIH,IACtB,CAEL,EAkBA,IAAkBK,EAAAf,EAAAA,UAAAgB,WAVlB,SAAoBC,EAAKC,GACrB,CACI,MAAMR,EAAMO,EAAIN,SAAS,IACnBQ,EAASZ,OAAOC,KAAKE,EAAIU,SAAiB,EAARF,EAAW,KAAKG,MAAM,EAAW,EAARH,GAAY,OAE7E,OADAC,EAAOV,UACAU,CACV,CAGL,EAeAnB,EAAAC,UAAAqB,WAPA,SAAoBL,EAAKC,GACrB,CACI,MAAMR,EAAMO,EAAIN,SAAS,IACzB,OAAOJ,OAAOC,KAAKE,EAAIU,SAAiB,EAARF,EAAW,KAAKG,MAAM,EAAW,EAARH,GAAY,MACxE,CAEL","x_google_ignoreList":[0]}