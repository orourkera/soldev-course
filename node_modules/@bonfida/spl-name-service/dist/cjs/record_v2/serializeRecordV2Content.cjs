"use strict";var e=require("@solana/web3.js"),r=require("../node_modules/punycode/punycode.es6.cjs"),o=require("../node_modules/@scure/base/lib/esm/index.cjs"),t=require("../node_modules/ipaddr.js/lib/ipaddr.cjs"),c=require("../utils/check.cjs"),n=require("../types/record.cjs"),s=require("../error.cjs"),d=require("./const.cjs");exports.serializeRecordV2Content=(i,u)=>{if(d.UTF8_ENCODED.has(u))return u!==n.Record.CNAME&&u!==n.Record.TXT||(i=r.encode(i)),Buffer.from(i,"utf-8");if(u===n.Record.SOL)return new e.PublicKey(i).toBuffer();if(d.EVM_RECORDS.has(u))return c.check("0x"===i.slice(0,2),new s.InvalidEvmAddressError("The record content must start with `0x`")),Buffer.from(i.slice(2),"hex");if(u===n.Record.Injective){const e=o.bech32.decodeToBytes(i);return c.check("inj"===e.prefix,new s.InvalidInjectiveAddressError("The record content must start with `inj")),c.check(20===e.bytes.length,new s.InvalidInjectiveAddressError("The record data must be 20 bytes long")),Buffer.from(e.bytes)}if(u===n.Record.A){const e=t.ipaddrExports.parse(i).toByteArray();return c.check(4===e.length,new s.InvalidARecordError("The record content must be 4 bytes long")),Buffer.from(e)}if(u===n.Record.AAAA){const e=t.ipaddrExports.parse(i).toByteArray();return c.check(16===e.length,new s.InvalidAAAARecordError("The record content must be 16 bytes long")),Buffer.from(e)}throw new s.InvalidRecordInputError("The record content is malformed")};
//# sourceMappingURL=serializeRecordV2Content.cjs.map
